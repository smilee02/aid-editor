import OpenAI from "openai";
import { marked } from "marked";

let openaiInstance: OpenAI | null = null;

/**
 * @summary Returns a singleton instance of the OpenAI client.
 * @description Initializes and returns an OpenAI client instance if it does not already exist. This ensures that only one instance of the client is used throughout the application.
 *
 * @returns {OpenAI} - The OpenAI client instance.
 */
export function getOpenAIInstance() {
  if (!openaiInstance) {
    openaiInstance = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      dangerouslyAllowBrowser: true, // Not recommended for client-side applications
    });
  }
  return openaiInstance;
}

/**
 * @summary Clears the current OpenAI client instance.
 * @description Resets the OpenAI client instance to null. This can be useful for resetting the client configuration or cleaning up resources.
 */
export function clearOpenAIInstance() {
  openaiInstance = null;
}

/**
 * @summary Sends a prompt to the OpenAI API and returns the generated content.
 * @description This function sends a chat completion request to the OpenAI API using the specified prompt. If an error occurs, it triggers the alert callback with the error message.
 *
 * @param {string} prompt - The prompt to send to the OpenAI API.
 * @param {(message: string) => void} showAlert - Callback function to display an alert if an error occurs.
 * @returns {Promise<string>} - The content generated by the OpenAI API based on the prompt.
 */
export async function sendRequest(
  prompt: string,
  showAlert: (message: string) => void
) {
  try {
    console.log("Starting sendRequest with prompt:", prompt);

    const completion = await openaiInstance!.chat.completions.create({
      messages: [
        {
          role: "system",
          content:
            "You are an amazing writer. You will just write for me what I asked.",
        },
        { role: "user", content: prompt },
      ],
      model: "gpt-4o-mini",
    });

    console.log("Received response from OpenAI:", completion);
    return handleResponse(completion.choices[0].message.content!);
  } catch (e) {
    showAlert((e as Error).message);
    return "";
  }
}

function handleResponse(response: string) {
  return marked.parse(response);
}
